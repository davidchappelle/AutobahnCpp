///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Tavendo GmbH
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#include <msgpack.hpp>
#include <string>
#include <unordered_map>

namespace autobahn {

inline wamp_result_details::wamp_result_details()
    : m_progress(false)
{
}

inline wamp_result_details::wamp_result_details(wamp_result_details&& other)
    : m_progress(std::move(other.m_progress))
{
}

inline wamp_result_details::wamp_result_details(const wamp_result_details& other)
    : m_progress(other.m_progress)
{
}

inline wamp_result_details& wamp_result_details::operator=(wamp_result_details&& other)
{
    if (this == &other) {
        return *this;
    }

    m_progress = std::move(other.m_progress);

    return *this;
}

inline wamp_result_details& wamp_result_details::operator=(const wamp_result_details& other)
{
    if (this == &other) {
        return *this;
    }

    m_progress = other.m_progress;

    return *this;
}

inline bool wamp_result_details::progress() const
{
    return m_progress;
}

inline void wamp_result_details::set_progress(bool progress)
{
    m_progress = progress;
}

} // namespace autobahn

namespace msgpack {
MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS) {
namespace adaptor {

template<>
struct convert<autobahn::wamp_result_details>
{
    msgpack::object const& operator()(
            msgpack::object const& object,
            autobahn::wamp_result_details& details) const
    {
        std::unordered_map<std::string, msgpack::object> details_map;
        object >> details_map;

        auto details_map_itr = details_map.find("progress");
        if (details_map_itr != details_map.end()) {
            details.set_progress(details_map_itr->second.as<bool>());
        }

        return object;
    }
};

template<>
struct pack<autobahn::wamp_result_details>
{
    template <typename Stream>
    msgpack::packer<Stream>& operator()(
            msgpack::packer<Stream>& packer,
            autobahn::wamp_result_details const& details) const
    {
        std::unordered_map<std::string, unsigned> details_map;
        bool progress = details.progress();
        if (progress) {
            details_map["progress"] = progress;
        }

        packer.pack(details_map);

        return packer;
    }
};

template <>
struct object_with_zone<autobahn::wamp_result_details>
{
    void operator()(
            msgpack::object::with_zone& object,
            const autobahn::wamp_result_details& details)
    {
        std::unordered_map<std::string, msgpack::object> details_map;

        bool progress = details.progress();
        if (progress) {
            details_map["progress"] = msgpack::object(progress);
        }

        object << details_map;
    }
};

} // namespace adaptor
} // MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS)
} // namespace msgpack
